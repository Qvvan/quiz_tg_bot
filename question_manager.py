import random

from telebot import types


class QuestionManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""

    def __init__(self, db_handler, bot):
        self.db_handler = db_handler
        self.bot = bot

    def get_question(self, tg_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è.

        Args:
            tg_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        now = self.get_current_question(tg_id)
        if now:
            quest_id = now[0]
            response = self.get_question_by_id(quest_id)[0]
            answer = response['answer']
            wrong = response['wrong']
            quest = response['question']
            path = response['path_img']
        else:
            self.bot.send_message(tg_id, '–ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç.‚úÖ')
            return

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        s = '\n'
        if wrong:
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            options = wrong + [answer]
            random.shuffle(options)
            for i, option in enumerate(options, start=1):
                markup.add(f'{option}')
                s += f'\n{i}. {option}'
        if path:
            with open(path, 'rb') as photo:
                self.bot.send_photo(tg_id, photo, quest + s,
                                    reply_markup=markup if wrong else types.ReplyKeyboardRemove())
        else:
            self.bot.send_message(tg_id, quest + s, reply_markup=markup if wrong else types.ReplyKeyboardRemove())

    def get_current_question(self, tg_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            tg_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Returns:
            tuple: –ö–æ—Ä—Ç–µ–∂ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º –≤–æ–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        cursor = self.db_handler.execute_query(f"SELECT * FROM public.now WHERE tg_id = {tg_id} LIMIT 1")
        return cursor.fetchone()

    def get_question_by_id(self, quest_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.

            quest_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞.

        Returns:
            str: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞.
        """
        cursor = self.db_handler.execute_query(
            f"SELECT jsonb_build_object('question', question, 'answer', answer, 'wrong', wrong, 'path_img', path_img) FROM public.question WHERE id = {quest_id}")
        return cursor.fetchone()

    def add_new_user_questions(self, tg_id):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            tg_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Returns:
            bool: True, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
        """
        cursor = self.db_handler.execute_query("SELECT id FROM public.question;")
        questions = cursor.fetchall()

        for question_id in questions:
            cursor.execute(
                f"SELECT COUNT(*) FROM public.user_question WHERE tg_id = {tg_id} AND quest_id = {question_id[0]};")
            count = cursor.fetchone()[0]

            if count == 0:
                print('–ß—Ç–æ-—Ç–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ', question_id[0])
                cursor.execute(
                    f"INSERT INTO public.user_question(quest_id, tg_id, status) VALUES ({question_id[0]}, {tg_id}, 'NO');")
                self.db_handler.db_conn.commit()

        return True

    def send_first_question_to_users(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
        cursor = self.db_handler.execute_query("SELECT tg_id FROM public.user")
        users = cursor.fetchall()

        for tg_id in users:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            s = '\n'
            tg_id = tg_id[0]

            now = self.get_current_question(tg_id)

            if now:
                quest_id = now[0]
                response = self.get_question_by_id(quest_id)[0]
                answer = response['answer']
                wrong = response['wrong']
                quest = response['question']
                path = response['path_img']
                self.bot.send_message(tg_id, '–í–æ–ø—Ä–æ—Å—ã –¥–Ω—è! üíØ')
                if wrong:
                    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                    options = wrong + [answer]
                    random.shuffle(options)
                    for i, option in enumerate(options, start=1):
                        markup.add(f'{option}')
                        s += f'\n{i}. {option}'
                if path:
                    with open(path, 'rb') as photo:
                        self.bot.send_photo(tg_id, photo, quest + s,
                                            reply_markup=markup if wrong else types.ReplyKeyboardRemove())
                else:
                    self.bot.send_message(tg_id, quest + s,
                                          reply_markup=markup if wrong else types.ReplyKeyboardRemove())


    def reminder(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ–± –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–∞—Ö."""
        self.db_handler.connect()
        cursor = self.db_handler.execute_query("SELECT DISTINCT tg_id FROM public.now;")
        users = cursor.fetchall()

        for tg_id in users:
            self.bot.send_message(tg_id[0],
                                  '–í—Ä–µ–º—è –ø–æ–¥–∂–∏–º–∞–µ—Ç!‚è∞\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤–æ–ø—Ä–æ—Å—ã –¥–æ 18:00, —á—Ç–æ–±—ã –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ')
        self.db_handler.close_connection()

    def reset_questions(self):
        """–°–±—Ä–æ—Å —Ç–µ–∫—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö."""
        self.db_handler.connect()
        cursor = self.db_handler.execute_query("INSERT INTO public.wrong_list SELECT * FROM public.now;")
        cursor.execute("DELETE FROM public.now;")
        self.add_questions_to_now_for_all_users()
        cursor.execute("INSERT INTO public.now(quest_id, tg_id) SELECT quest_id, tg_id FROM public.wrong_list;")
        cursor.execute("DELETE FROM public.wrong_list;")
        self.db_handler.db_conn.commit()
        self.send_first_question_to_users()
        self.db_handler.close_connection()

    def add_questions_to_now_for_all_users(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        cursor = self.db_handler.execute_query("SELECT tg_id FROM public.user")
        tg_ids = cursor.fetchall()

        for tg_id in tg_ids:
            cursor.execute("INSERT INTO public.now(quest_id, tg_id) "
                           "SELECT quest_id, tg_id "
                           "FROM (SELECT quest_id, tg_id, ROW_NUMBER() OVER(PARTITION BY tg_id ORDER BY quest_id) AS rn "
                           "FROM public.user_question WHERE status = 'NO' AND tg_id = %s) sub "
                           "WHERE rn <= 3;", (tg_id,))
            self.db_handler.db_conn.commit()

            cursor.execute("UPDATE public.user_question SET status = 'YES' "
                           "WHERE tg_id = %s AND quest_id IN (SELECT quest_id FROM public.now WHERE tg_id = %s);",
                           (tg_id, tg_id))
            self.db_handler.db_conn.commit()

    def add_wrong_question(self, quest_id, tg_id):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            quest_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞.
            tg_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        self.db_handler.execute_query(
            f"INSERT INTO public.wrong_list(quest_id, tg_id) VALUES ({quest_id}, {tg_id});")
        self.db_handler.db_conn.commit()

    def delete_current_question(self, tg_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            tg_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        now = self.get_current_question(tg_id)
        if now:
            quest_id, tg_id = now[0], now[1]
            self.db_handler.execute_query(
                f"DELETE FROM public.now WHERE quest_id = {quest_id} and tg_id = {tg_id};")
            self.db_handler.db_conn.commit()

    def process_message(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏."""
        self.db_handler.execute_query("""
            INSERT INTO public.user_question (tg_id, quest_id, status)
            SELECT CAST(u.tg_id AS BIGINT), q.id, 'NO'
            FROM public.user AS u
            CROSS JOIN (
                SELECT q.id 
                FROM public.question AS q
                LEFT JOIN public.user_question AS uq ON q.id = uq.quest_id
                WHERE uq.quest_id IS NULL
            ) q;
        """)
        self.db_handler.db_conn.commit()
        return "–¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"

    def delete_all(self):
        self.db_handler.execute_query("DELETE FROM public.user;")
        self.db_handler.execute_query("DELETE FROM public.wrong_list;")
        self.db_handler.execute_query("DELETE FROM public.now;")
        self.db_handler.execute_query("DELETE FROM public.user_question;")
        self.db_handler.db_conn.commit()
