import telebot
import psycopg2
from telebot import types
import random
import schedule
import time
import threading

class QuizBot:
    def __init__(self, token, db_params):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç QuizBot.

        Args:
            token (str): –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞.
            db_params (dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL.
        """
        self.bot = telebot.TeleBot(token)
        self.db_conn = psycopg2.connect(**db_params)

    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        @self.bot.message_handler(commands=['start'])
        def handle_start(message):
            name = message.chat.first_name
            chat_id = message.chat.id
            if self.is_user_exists(chat_id):
                self.bot.send_message(chat_id, f'–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, {name}!')
            elif self.add_user(chat_id, name):
                if self.add_new_user_questions(chat_id):
                    self.bot.send_message(chat_id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, {name}!\n–ü–æ—Å–ª–µ 18:00 –≤–∞–º –ø—Ä–∏–¥—É—Ç –ø–µ—Ä–≤—ã–µ 3 –≤–æ–ø—Ä–æ—Å–∞!')
                else:
                    self.bot.send_message(chat_id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')

        @self.bot.message_handler(content_types=['text'])
        def handle_answer(message):
            print(message.text)
            print(type(message.chat.id))
            if message.text == '–≤—Å–µ' and message.chat.id == 323993202:
                cursor = self.db_conn.cursor()
                cursor.execute("DELETE FROM public.user;")
                cursor.execute("DELETE FROM public.wrong_list;")
                cursor.execute("DELETE FROM public.now;")
                cursor.execute("DELETE FROM public.user_question;")
                self.db_conn.commit()
                print('–Ø —Ç—É—Ç')
                self.bot.send_message(message.chat.id, '–Ø –≤—Å–µ —É–¥–∞–ª–∏–ª!')
                return
            chat_id = message.chat.id
            if not self.is_user_exists(chat_id):
                self.bot.send_message(chat_id, '–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å')
                return
            now = self.get_current_question(chat_id)
            if now:
                quest_id, user_id = now[1], now[2]
                quest = self.get_question_by_id(quest_id)
                print(message.chat.first_name + ' –æ—Ç–≤–µ—Ç–∏–ª: ', message.text)
                answer = message.text.replace(' ', '').lower()
                if answer == quest['answer'].replace(' ', ''):
                    self.bot.send_message(chat_id, '–û—Ç–ª–∏—á–Ω–æ, —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! üî•')
                else:
                    self.bot.send_message(chat_id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –°—Ç–æ–∏—Ç –µ—â—ë —Ä–∞–∑ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —ç—Ç—É —Ç–µ–º—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–¥—ë—Ç —Ç–µ–±–µ –∑–∞–≤—Ç—Ä–∞! ‚è∞')
                    add_wrong_question(quest_id, user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ wrong_list
                self.delete_current_question(chat_id)
                self.get_question(chat_id)

        def add_wrong_question(quest_id, user_id):
            """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –≤ —Ç–∞–±–ª–∏—Ü—É wrong_list.

            Args:
                quest_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞.
                user_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            """
            cursor = self.db_conn.cursor()
            cursor.execute(
                f"INSERT INTO public.wrong_list(quest_id, user_id, status) VALUES ({quest_id}, {user_id}, 'YES');")
            self.db_conn.commit()

        self.bot.polling(none_stop = True, interval = 0)


    def is_user_exists(self, chat_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ chat_id.

        Args:
            chat_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Returns:
            bool: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º chat_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ False.
        """
        cursor = self.db_conn.cursor()
        cursor.execute(f"SELECT COUNT(*) FROM public.user WHERE tg_id = '{chat_id}'")
        count = cursor.fetchone()[0]
        return count > 0

    def add_user(self, chat_id, name):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É 'user'.

        Args:
            chat_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (tg_id).
            name (str): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Returns:
            bool: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, –∏–Ω–∞—á–µ False.
        """
        cursor = self.db_conn.cursor()
        try:
            cursor.execute(f"INSERT INTO public.user(name, tg_id) VALUES ('{name}', '{chat_id}');")
            self.db_conn.commit()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False

    def get_question(self, tg_id):
        now = self.get_current_question(tg_id)
        if now:
            quest_id = now[1]
            quest = self.get_question_by_id(quest_id)
        else:
            self.bot.send_message(tg_id, '–ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç.')
            return

        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        # options = quest['wrong'] + [quest['answer']]
        # random.shuffle(options)
        # markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        # for option in options:
        #     markup.add(option)
        # self.bot.send_message(user_id, quest['question'], reply_markup=markup)
        self.bot.send_message(tg_id, quest['question'])

    def get_current_question(self, tg_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

        Returns:
            tuple: –ö–æ—Ä—Ç–µ–∂ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º –≤–æ–ø—Ä–æ—Å–µ.
        """
        cursor = self.db_conn.cursor()
        cursor.execute(f"SELECT * FROM public.now WHERE user_id = {tg_id} LIMIT 1")
        return cursor.fetchone()

    def get_question_by_id(self, quest_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

        Args:
            quest_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞.

        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ–ø—Ä–æ—Å–µ.
        """
        cursor = self.db_conn.cursor()
        cursor.execute(f"SELECT question FROM public.question WHERE id = {quest_id}")
        return cursor.fetchone()[0]



    def insert_current_question(self, quest_id, user_id):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Ç–∞–±–ª–∏—Ü—É 'now'.

        Args:
            quest_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞.
            user_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        cursor = self.db_conn.cursor()
        cursor.execute(f"INSERT INTO public.now(quest_id, user_id) VALUES ({quest_id}, {user_id});")
        self.db_conn.commit()


    def delete_current_question(self, tg_id):
        """–£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'now'."""
        now = self.get_current_question(tg_id)
        if now:
            quest_id, user_id = now[1], now[2]
            cursor = self.db_conn.cursor()
            cursor.execute(f"DELETE FROM public.now WHERE quest_id = {quest_id} and user_id = {user_id};")
            self.db_conn.commit()

    def add_questions_to_now_for_all_users(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü—É 'now' –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å."""
        cursor = self.db_conn.cursor()
        cursor.execute("SELECT tg_id FROM public.user")
        user_ids = cursor.fetchall()

        for user_id in user_ids:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü—É 'now' –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("INSERT INTO public.now(quest_id, user_id) " \
                           "SELECT quest_id, user_id " \
                           "FROM (" \
                           "SELECT quest_id, user_id, ROW_NUMBER() OVER(PARTITION BY user_id ORDER BY quest_id) AS rn " \
                           "FROM public.user_question " \
                           "WHERE status = 'NO' AND user_id = %s) sub " \
                           "WHERE rn <= 3;", (user_id,))
            self.db_conn.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ user_question –Ω–∞ 'YES'
            cursor.execute("UPDATE public.user_question SET status = 'YES' " \
                           "WHERE user_id = %s AND quest_id IN (SELECT quest_id FROM public.now WHERE user_id = %s);",
                           (user_id, user_id))
            self.db_conn.commit()


    def reset_questions(self):
        cursor = self.db_conn.cursor()
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–∞–±–ª–∏—Ü—É wrong_list —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'NO'
        cursor.execute("INSERT INTO public.wrong_list SELECT * FROM public.now;")
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        cursor.execute("DELETE FROM public.now;")
        # –í—ã–±–∏—Ä–∞–µ–º 3 –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—É now
        self.add_questions_to_now_for_all_users()
        cursor.execute("INSERT INTO public.now(quest_id, user_id) " \
                       "SELECT quest_id, user_id " \
                       "FROM public.wrong_list;")
        cursor.execute("DELETE FROM public.wrong_list;")
        self.db_conn.commit()
        # –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –≤–æ–ø—Ä–æ—Å–æ–≤, –ø—Ä–∏—Å—ã–ª–∞–µ–º –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        self.send_first_question_to_users()

    def send_first_question_to_users(self):
        """–†–∞—Å—Å—ã–ª–∞–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'now' –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'user'."""
        cursor = self.db_conn.cursor()
        cursor.execute("SELECT tg_id FROM public.user")
        users = cursor.fetchall()
        print(users)
        for tg_id in users:
            tg_id = tg_id[0]
            # –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'now' –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("SELECT quest_id FROM public.now WHERE user_id = %s LIMIT 1;", (tg_id,))
            question_id = cursor.fetchone()

            if question_id:
                # –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
                cursor.execute("SELECT question FROM public.question WHERE id = %s;", (question_id,))
                question_text = cursor.fetchone()[0]
                if question_text:
                    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    self.bot.send_message(tg_id, '–í–æ–ø—Ä–æ—Å—ã –¥–Ω—è! üíØ')
                    self.bot.send_message(tg_id, question_text['question'])

    def add_new_user_questions(self, user_id):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'question' –≤ —Ç–∞–±–ª–∏—Ü—É 'user_question' –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Returns:
            bool: True, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã, –∏–Ω–∞—á–µ False.
        """
        cursor = self.db_conn.cursor()
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'question'
            cursor.execute("SELECT id FROM public.question;")
            questions = cursor.fetchall()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∏–∑ —ç—Ç–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ 'user_question' –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for question_id in questions:
                cursor.execute(
                    f"SELECT COUNT(*) FROM public.user_question WHERE user_id = {user_id} AND quest_id = {question_id[0]};")
                count = cursor.fetchone()[0]
                # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–∞ –µ—â–µ –Ω–µ—Ç –≤ 'user_question', –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'NO'
                if count == 0:
                    print('–ß—Ç–æ-—Ç–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ', question_id[0])
                    cursor.execute(
                        f"INSERT INTO public.user_question(quest_id, user_id, status) VALUES ({question_id[0]}, {user_id}, 'NO');")
                    self.db_conn.commit()

            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False

    def schedule_reset_questions(self):
        # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ check_and_reset_questions –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 16:01
        schedule.every().day.at("16:58").do(self.reset_questions)

    def start_scheduled_tasks(self):
        while True:
            schedule.run_pending()
            time.sleep(1)


if __name__ == "__main__":
    token = '6882354049:AAFyIi0qwlK8WPtWjYngFwU-ncZ2qs0WR3Q'
    db_params = {
        "database": "tg",
        "user": "postgres",
        "password": "123",
        "host": "localhost",
        "port": '5432'
    }
    quiz_bot = QuizBot(token, db_params)
    quiz_bot.schedule_reset_questions()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=quiz_bot.start_scheduled_tasks)
    scheduler_thread.start()

    quiz_bot.start()
