import telebot
import threading

from database_handler import DatabaseHandler
from question_manager import QuestionManager
from quiz_scheduler import QuizScheduler
from user_manager import UserManager


class TelegramBotHandler:
    def __init__(self, token, db_params):
        telebot.apihelper.SESSION_TIME_TO_LIVE = 60 * 5
        self.bot = telebot.TeleBot(token)
        self.db_handler = DatabaseHandler(db_params)
        self.user_manager = UserManager(self.db_handler, self.bot)
        self.question_manager = QuestionManager(self.db_handler, self.bot)
        self.quiz_scheduler = QuizScheduler(self.bot, self.user_manager, self.question_manager)

    def connect_to_db(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        self.db_handler.connect()

    def close_db_connection(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        self.db_handler.close_connection()

    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""

        @self.bot.message_handler(commands=['start'])
        def handle_start(message):
            self.connect_to_db()
            name = message.chat.first_name
            tg_id = message.chat.id
            if self.user_manager.is_user_exists(tg_id):
                self.bot.send_message(tg_id, f'–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, {name}!')
            elif self.user_manager.add_user(tg_id, name):
                if self.question_manager.add_new_user_questions(tg_id):
                    self.bot.send_message(tg_id,
                                          f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, {name}!\n–ü–æ—Å–ª–µ 18:00 –≤–∞–º –ø—Ä–∏–¥—É—Ç –ø–µ—Ä–≤—ã–µ 3 –≤–æ–ø—Ä–æ—Å–∞!')
                else:
                    self.bot.send_message(tg_id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
            self.close_db_connection()

        @self.bot.message_handler(content_types=['text'])
        def handle_answer(message):
            self.connect_to_db()
            tg_id = message.chat.id
            if message.text.lower() == '–≤—Å–µ' and message.chat.id == 323993202:
                self.question_manager.delete_all()
                self.bot.send_message(message.chat.id, '–Ø –≤—Å–µ —É–¥–∞–ª–∏–ª!')
                return

            elif message.text == '–æ–±–Ω–æ–≤–∏—Ç—å' and message.chat.id == 323993202:
                self.bot.send_message(323993202, self.question_manager.process_message())
                return

            elif message.text.replace(' ', '').split('-')[0] == '—É–¥–∞–ª–∏' and message.chat.id == 323993202:
                self.user_manager.delete_user(message.text.replace(' ', '').split('-')[1])
                return

            elif not self.user_manager.is_user_exists(tg_id):
                self.bot.send_message(tg_id, '–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å')
                return

            now = self.question_manager.get_current_question(tg_id)
            if now:
                quest_id, tg_id = now[0], now[1]
                response = self.question_manager.get_question_by_id(quest_id)[0]
                print(message.chat.first_name + ' –æ—Ç–≤–µ—Ç–∏–ª: ', message.text)
                answer = message.text.replace(' ', '')
                if answer in response['answer'].replace(' ', '').split('|'):
                    self.bot.send_message(tg_id, '–û—Ç–ª–∏—á–Ω–æ, —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! üî•')
                else:
                    self.bot.send_message(tg_id,
                                          '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –°—Ç–æ–∏—Ç –µ—â—ë —Ä–∞–∑ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —ç—Ç—É —Ç–µ–º—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–¥—ë—Ç —Ç–µ–±–µ –∑–∞–≤—Ç—Ä–∞! ‚è∞')
                    self.question_manager.add_wrong_question(quest_id, tg_id)
                self.bot.send_message(323993202,
                                      f"–ù–∞ –≤–æ–ø—Ä–æ—Å\n {response['question']}\n{message.chat.first_name} –æ—Ç–≤–µ—Ç–∏–ª: {message.text}")
                self.question_manager.delete_current_question(tg_id)
                self.question_manager.get_question(tg_id)
            self.close_db_connection()

        try:
            self.bot.polling(none_stop=True, interval=0)
        except Exception as e:
            self.bot.send_message(323993202, f'–ë–æ—Ç –≤—ã–ª–µ—Ç–µ–ª\n–û—à–∏–±–∫–∞: {e}')
            self.start()

    def start_scheduled_tasks(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        self.quiz_scheduler.start_scheduled_tasks()


if __name__ == "__main__":

    print('–ù–∞—á–∞–ª–æ –Ω–∞–±–æ—Ç—ã')

    token = '5278804872:AAGh40DpEzAUs1FcjJJ8oCQTWm7LJ5qkFXQ'
    db_params = {
        "database": "tg_db",
        "user": "postgres",
        "password": "123",
        "host": "localhost",
        "port": '5432'
    }
    quiz_bot = TelegramBotHandler(token, db_params)
    quiz_bot.quiz_scheduler.schedule_reset_questions()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=quiz_bot.start_scheduled_tasks)
    scheduler_thread.start()

    quiz_bot.start()
